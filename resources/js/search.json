[[{"l":"Installing Mimick","p":["There are three ways you can install Mimick: conda, pixi, pip. Make note of the names of the code blocks, as they describe installation and usage variations."]}],[{"l":"Using Mimick","p":["Use --help or -h or call mimick without arguments to call up the docstring."]},{"l":"Required Arguments","p":["Running Mimick will always require a barcode specification and at least one input FASTA file."]},{"l":"Options"}],[{"l":"The simulation process","p":["Or algorithm, if you want to be fancy about it. Note that mentions of \"contig\" below are synonymous with\"chromosome\" if your input FASTA files are chromosome-scale."]},{"l":"0: Parse the FASTA file(s)","p":["The FASTA files are processed into schema that contain characteristics for each contig, along with the sequence in it. These schema are part of the recipes that get processed during simulation. Schema contain information"]},{"l":"The loop"},{"l":"1: Pick a barcode","p":["Whether you chose to have barcodes generated or provided your own, Mimick picks the first one and also generates an output version of it. Since input barcodes are always nucleotides, the barcodes will have a corresponding haplotagging or"]},{"l":"2: Making the molecule recipes","p":["Based on the --molecules-per parameter, Mimick will decide how many unrelated molecules will be associated with the barcode. Then, it's a matter of randomly choosing (with replacement) which schema to make molecules from. Remember, each contig for each"]},{"l":"3: Submitting the molecule recipes for simulation","p":["This is the part that's multithreaded. Once we have a molecule recipe and its associated fasta file, Mimick hands the information over to wgsim via pywgsim, where the fasta file will then be the input \"genome\" from which the software will randomly generate the target number of reads for that..."]},{"l":"4: Monitor schema targets","p":["The number of reads that were generated for every molecule are added to that molecule's source schema to track the number of reads already produced for that contig for that haplotype. Once a schema reaches its reads target, that schema will be removed from the list of schema that are randomly sampled"]},{"l":"5: Repeat until all schema read targets are met","p":["Once there are no more schema left to sample, simulation is done!"]},{"l":"X: Convert and append reads","p":["A separate concurrent process converts the reads simulated from a molecule into the format specified by --output-type and writes the reads to final R1 and R2 FASTQ files."]}],[{"l":"Linked-Read Data Formats","p":["Linked-read chemistries continue to evolve and it seems like every new method wants to use their own bespoke convention for putting barcodes in FASTQ files (because that's exactly what's happening, unfortunately). Until"]},{"l":"Linked-read simulation types","p":["You can specify the linked-read barcode chemistry to simulate using the combination of --lengths, --segments and--output-type. For example, you can generate 96 6bp barcodes (common haplotagging style), select"]},{"l":"Linked-read output types","p":["Like discussed above, there are options for how the resulting linked-read data can look. Why would you want one format over another? Well, it could be personal preference or the software you want to use is configured for a very"]},{"l":"Proper read pairing","p":["A consideration for downstream application using the simulated linked reads is that you might need to make sure the paired-end reads are properly paired, since Mimick does not enforce validating proper"]}]]